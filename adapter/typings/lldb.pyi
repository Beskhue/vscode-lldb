from typing import overload

eLanguageTypeC_plus_plus = 0

eLaunchFlagLaunchInTTY = 0
eLaunchFlagCloseTTYOnExit = 0

eStateExited = 0
eStateStopped = 0
eStateCrashed = 0
eStateDetached = 0

eStopReasonBreakpoint = 0
eStopReasonException = 0
eStopReasonTrace = 0
eStopReasonPlanComplete = 0
eStopReasonSignal = 0

LLDB_ARCH_DEFAULT = 0

class SBDebugger:
    @staticmethod
    def Create() -> SBDebugger: ...
    def GetVersionString(self) -> str: ...
    def CreateTargetWithFileAndArch(self, file: str, arch: int): ...
    def SetAsync(self, on: bool) -> None: ...

class SBTarget:
    def IsValid(self) -> bool: ...
    def BreakpointCreateByLocation(self, file: str, line: int) -> SBBreakpoint: ...
    def BreakpointCreateByName(self, sym: str) -> SBBreakpoint: ...
    def BreakpointDelete(self, int) -> bool: ...

class SBProcess:
    eBroadcastBitStateChanged = 0
    eBroadcastBitSTDOUT = 0
    eBroadcastBitSTDERR = 0

    @staticmethod
    def EventIsProcessEvent(e: SBEvent) -> bool: ...
    @staticmethod
    def GetStateFromEvent(e: SBEvent) -> int: ...
    @staticmethod
    def GetRestartedFromEvent(e: SBEvent) -> bool: ...

    def Stop(self) -> None: ...

class SBBreakpoint:
    def GetID(self) -> int: ...
    def SetCondition(self, str) -> None: ...
    def GetCondition(self) -> str: ...

class SBEvent:
    def GetDescription(self, s: SBStream) -> bool: ...
    def GetDataFlavor(self) -> str: ...

class SBStream:
    def GetData(self) -> str: ...

class SBListener:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, name: str) -> None: ...
    def IsValid(self) -> bool: ...
    def WaitForEvent(self, num_seconds: int, event: SBEvent) -> bool: ...

class SBError:
    def Success(self) -> bool: ...
    def GetCString(self) -> str: ...

class SBCommandReturnObject:
    def Succeeded(self) -> bool: ...
    def GetError(self) -> str: ...
    def GetOutput(self) -> str: ...
