from typing import overload, Iterable, Sized

eLanguageTypeC_plus_plus = 0

eLaunchFlagLaunchInTTY = 0
eLaunchFlagCloseTTYOnExit = 0

eStateExited = 0
eStateStopped = 0
eStateCrashed = 0
eStateDetached = 0

eStopReasonBreakpoint = 0
eStopReasonException = 0
eStopReasonTrace = 0
eStopReasonPlanComplete = 0
eStopReasonSignal = 0

LLDB_ARCH_DEFAULT = 0

class SBDebugger:
    @staticmethod
    def Create() -> SBDebugger: ...
    def GetVersionString(self) -> str: ...
    def CreateTargetWithFileAndArch(self, file: str, arch: int): ...
    def SetAsync(self, on: bool) -> None: ...
    def GetCommandInterpreter(self) -> SBCommandInterpreter: ...

class SBTarget:
    def IsValid(self) -> bool: ...
    def BreakpointCreateByLocation(self, file: str, line: int) -> SBBreakpoint: ...
    def BreakpointCreateByName(self, sym: str) -> SBBreakpoint: ...
    def BreakpointDelete(self, int) -> bool: ...

class SBProcess(Iterable[SBThread]):
    eBroadcastBitStateChanged = 0
    eBroadcastBitSTDOUT = 0
    eBroadcastBitSTDERR = 0

    @staticmethod
    def EventIsProcessEvent(e: SBEvent) -> bool: ...
    @staticmethod
    def GetStateFromEvent(e: SBEvent) -> int: ...
    @staticmethod
    def GetRestartedFromEvent(e: SBEvent) -> bool: ...

    def GetExitStatus(self) -> int: ...
    def GetThreadByID(self, id: int) -> SBThread: ...
    def Continue(self) -> SBError: ...
    def Stop(self) -> SBError: ...
    def Kill(self) -> SBError: ...
    def GetSTDOUT(self, size: int) -> str: ...
    def GetSTDERR(self, size: int) -> str: ...
    def SetSelectedThread(self, thread: SBThread) -> bool: ...

class SBThread(Iterable[SBFrame], Sized):
    frames = List[SBFrame]
    num_frames = 0
    def GetThreadID(self) -> int: ...
    def GetName(seld) -> str: ...
    def StepOver(self) -> None: ...
    def StepInto(self) -> None: ...
    def StepOut(self) -> None: ...
    def GetStopReason(self) -> int: ...
    def GetStopReasonDataAtIndex(self, index: int) -> int: ...

class SBFrame:
    ...

class SBBreakpoint:
    num_locations = 0
    def GetID(self) -> int: ...
    def SetCondition(self, str) -> None: ...
    def GetCondition(self) -> str: ...
    def GetNumLocations(self) -> int: ...
    def GetLocationAtIndex(self, index: int) -> SBBreakpointLocation: ...

class SBBreakpointLocation:
    def GetAddress(self) -> SBAddress: ...

class SBAddress:
    def GetLineEntry(self) -> SBLineEntry: ...

class SBLineEntry:
    line = 0
    def IsValid(self) -> bool: ...
    def GetFileSpec(self) -> SBFileSpec: ...

class SBFileSpec:
    basename = ""
    fullpath = ""
    def IsValid(self) -> bool: ...

class SBEvent:
    def GetType(self) -> int: ...
    def GetDescription(self, stm: SBStream) -> bool: ...
    def GetDataFlavor(self) -> str: ...

class SBStream:
    def GetData(self) -> str: ...

class SBListener:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, name: str) -> None: ...
    def IsValid(self) -> bool: ...
    def WaitForEvent(self, num_seconds: int, event: SBEvent) -> bool: ...

class SBError:
    def Success(self) -> bool: ...
    def GetCString(self) -> str: ...

class SBCommandInterpreter:
    def HandleCommand(self, command: str, result: SBCommandReturnObject) -> int: ...

class SBCommandReturnObject:
    def Succeeded(self) -> bool: ...
    def GetError(self) -> str: ...
    def GetOutput(self) -> str: ...
